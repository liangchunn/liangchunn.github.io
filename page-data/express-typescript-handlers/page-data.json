{"componentChunkName":"component---src-templates-blog-post-js","path":"/express-typescript-handlers/","result":{"data":{"site":{"siteMetadata":{"title":"TypeError"}},"markdownRemark":{"id":"543907d7-f67c-5638-8129-47f985c2f836","excerpt":"I’ve recently came across a problem where I really didn’t know how to approach,\nwhich was adding strict typings onto Express middlewares and response types…","html":"<p>I’ve recently came across a problem where I really didn’t know how to approach,\nwhich was adding strict typings onto Express middlewares and response types.\nThere seems to be no way to do this without messing half of <code class=\"language-text\">@types/express</code> and\n<code class=\"language-text\">@types/node</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// I can't constrain the Send type!</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    error<span class=\"token operator\">:</span> <span class=\"token string\">'???'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I’ve posted\n<a href=\"https://www.reddit.com/r/typescript/comments/aavk58/how_do_i_constrain_expressrequesthandlers_send_to/\">my question on /r/typescript</a>\nand Federico Feroldi (GitHub @cloudify) pointed me to\n<a href=\"https://federicoferoldi.com/2017/12/28/using-the-typescript-type-system-to-validate-express-handlers.html\">his article</a>\nabout functional composition of Express middlewares with strict typings, but I\nfound it extremely confusing, so this is my attempt to explain how to add\ncompile-time type checking to your Express middlewares.</p>\n<h2>First Thing’s First</h2>\n<p>We first consider the terms and the behaviour below:</p>\n<ul>\n<li>\n<p><strong>A middleware</strong> takes a raw <code class=\"language-text\">express.Request</code> instance and</p>\n<ul>\n<li>returns an object with type <code class=\"language-text\">T</code>, or</li>\n<li>end the request early because something bad happened</li>\n</ul>\n</li>\n<li><strong>A middleware handler</strong> takes a bunch of <code class=\"language-text\">T</code>s from composed middlewares and\nreturns <strong>one</strong> final response.</li>\n</ul>\n<p>We can visualize <strong>middlewares</strong> like this, where <code class=\"language-text\">M_x</code> are the middlewares and\n<code class=\"language-text\">R_x</code> are the responses of each corresponding middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">composeMiddlewares</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">R1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R4</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Then, a <strong>middleware handler</strong> accepts responses <code class=\"language-text\">R_x</code> from the middlewares and\nreturns one response <code class=\"language-text\">IResponse&lt;T&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">middlewareHandler</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">R1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></code></pre></div>\n<h2>Defining the Response Type</h2>\n<p>We realize the response of a middleware, or a composition of middlewares with\nthe type <code class=\"language-text\">IResponse&lt;T&gt;</code>, where <code class=\"language-text\">T</code> is a string literal to discriminate between\ndifferent <code class=\"language-text\">IResponse</code>-s.</p>\n<p>You can think of it as an intermediary type which is used internally to\nrepresent a response, and provides an <code class=\"language-text\">apply</code> function that has an\n<code class=\"language-text\">express.Response</code> so that you can tell express how to return an actual response\nwhen presented the <code class=\"language-text\">IReponse&lt;T&gt;</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token keyword\">interface</span></span> IResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> kind<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Example: <code class=\"language-text\">ResponseSuccessJson</code></h3>\n<p>Here’s an example of a response creator that creates an <code class=\"language-text\">IResponseSuccessJson</code>\nreturning a JSON with the status 200:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IResponseSuccessJson<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IResponse<span class=\"token operator\">&lt;</span><span class=\"token string\">\"IResponseSuccessJson\"</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">ResponseSuccessJson</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IResponseSuccessJson<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> response <span class=\"token operator\">=></span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>o<span class=\"token punctuation\">,</span>\n        kind<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">\"IResponseSuccessJson\"</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">:</span> o<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Example: <code class=\"language-text\">ResponseFailJson</code></h3>\n<p>And here we have the same thing but returning a status of 400:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IResponseFailJson<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IResponse<span class=\"token operator\">&lt;</span><span class=\"token string\">\"IResponseFailJson\"</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">ResponseFailJson</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IResponseFailJson<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> response <span class=\"token operator\">=></span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>o<span class=\"token punctuation\">,</span>\n        kind<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">\"IResponseFailJson\"</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">:</span> o<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Defining the Request Middleware</h2>\n<p>Next, we have the request middleware definition <code class=\"language-text\">IRequestMiddleware</code>. A\n<code class=\"language-text\">IRequestMiddleware</code> is a function that takes in an <code class=\"language-text\">express.Request</code> as a\nparameter and returns a promise of <code class=\"language-text\">Either</code> the error response <code class=\"language-text\">IResponse&lt;E&gt;</code> or\na type <code class=\"language-text\">R</code>. The <code class=\"language-text\">Either</code> type is used to facilitate cases where a middleware\nchain has to be stopped and a response has to be send immediately (more on this\nlater).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Either <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"fp-ts/lib/Either\"</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IRequestMiddleware<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  request<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Either<span class=\"token operator\">&lt;</span>IResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">>></span></code></pre></div>\n<h3>Short Interlude on the <code class=\"language-text\">Either</code> Type</h3>\n<p>The <code class=\"language-text\">Either</code> type is provided by the\n<a href=\"https://github.com/gcanti/fp-ts\"><code class=\"language-text\">fp-ts</code> library</a>, and <code class=\"language-text\">Either</code> is a strict\n<strong>disjoint union</strong> type.</p>\n<p>It is by convention that the left type is the ‘failure’ state while the right\ntype is the ‘success’ state. We can use helper functions like <code class=\"language-text\">left</code> and <code class=\"language-text\">right</code>\nto explicitly return the left or right type of a function.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">greaterThanOne</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token generic-function\"><span class=\"token function\">right</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token generic-function\"><span class=\"token function\">left</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Subsequently we can use <code class=\"language-text\">isLeft</code> and <code class=\"language-text\">isRight</code> to tell left and right values\napart.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">isLeft</span><span class=\"token punctuation\">(</span><span class=\"token function\">greaterThanOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span><span class=\"token function\">greaterThanOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2>Middleware Composition</h2>\n<p>Now that we have the response and the request middleware typings, we can compose\nmiddlewares by wrapping them with <code class=\"language-text\">withRequestMiddlewares</code>. If at any point of\ntime a middleware fails, an <code class=\"language-text\">IReponse&lt;E&gt;</code> is returned by using the <code class=\"language-text\">left</code>\nfunction, which will bail out the whole middleware chain and return a response\nof <code class=\"language-text\">IResponse&lt;E&gt;</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Profile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    picture<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> middlewareOne<span class=\"token operator\">:</span> IRequestMiddleware<span class=\"token operator\">&lt;</span><span class=\"token string\">'IResponseFailJson'</span><span class=\"token punctuation\">,</span> User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* condition */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// return the left type of the Either type</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">left</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IResponseFailJson<span class=\"token punctuation\">,</span> User<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">ResponseFailJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">            error<span class=\"token operator\">:</span> <span class=\"token string\">'Your error goes here'</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// return the right type of the Either type</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">right</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IResponseFailJson<span class=\"token punctuation\">,</span> User<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">            id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">            name<span class=\"token operator\">:</span> <span class=\"token string\">'James'</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> middlewareTwo<span class=\"token operator\">:</span> IRequestMiddleware<span class=\"token operator\">&lt;</span><span class=\"token string\">'IResponseFailJson'</span><span class=\"token punctuation\">,</span> Profile<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* */</span><span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> requestHandler <span class=\"token operator\">=</span> <span class=\"token function\">withRequestMiddlewares</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    middlewareOne<span class=\"token punctuation\">,</span> <span class=\"token comment\">// first middleware to fire</span></span><span class=\"gatsby-highlight-code-line\">    middlewareTwo  <span class=\"token comment\">// second middleware to fire</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* handler */</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Here’s the definition and implementation of <code class=\"language-text\">withRequestMiddlewares</code>, note that\nthe middlewares are called one after another, and if a left value is returned,\nwe <em>resolve</em> the left value and bail out from the middleware chain; otherwise,\nwe continue processing the next middleware.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isLeft <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"fp-ts/lib/Either\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">withRequestMiddlewares</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">E1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R2</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  m1<span class=\"token operator\">:</span> IRequestMiddleware<span class=\"token operator\">&lt;</span><span class=\"token constant\">E1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  m2<span class=\"token operator\">:</span> IRequestMiddleware<span class=\"token operator\">&lt;</span><span class=\"token constant\">E2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R2</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">O</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">handler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>r1<span class=\"token operator\">:</span> <span class=\"token constant\">R1</span><span class=\"token punctuation\">,</span> r2<span class=\"token operator\">:</span> <span class=\"token constant\">R2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">O</span><span class=\"token operator\">>></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> RequestHandler<span class=\"token operator\">&lt;</span><span class=\"token constant\">E1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">O</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> request <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">E1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">O</span><span class=\"token operator\">>></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeft</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// if the response of m1 was a left value, we bail</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeft</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// if the response of m2 was a left value, we bail</span>\n              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// all values are resolved fine, we pass the values to the handler and call it</span>\n              <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>The Middleware Handler</h2>\n<p>The middleware handler is the bridge between the the internal data types of your\napplication and the actual interface that the consumer of an API gets. A\nmiddleware handler takes all the response types of the middlewares, and then\nreturns an <code class=\"language-text\">IResponse&lt;T&gt;</code> which is then applied onto <code class=\"language-text\">express.Response</code>.</p>\n<p>It is also a good abstraction layer that separates internal data structures from\nAPI data structures, and also provides you a clear view of what can be returned\nfrom a composition of middlewares.</p>\n<p>Using the definitions above, we can write a <code class=\"language-text\">middlewareHandler</code> function, which\ntakes in two middleware results <code class=\"language-text\">User</code> and <code class=\"language-text\">Profile</code>, and returns a success JSON\nof type <code class=\"language-text\">CompositeResponse</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CompositeResponse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> User\n  profile<span class=\"token operator\">:</span> Profile\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> middlewareOne <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IRequestMiddleware<span class=\"token operator\">&lt;</span>\n  <span class=\"token string\">'IResponseFailJson'</span><span class=\"token punctuation\">,</span>\n  User\n<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> middlewareTwo <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IRequestMiddleware<span class=\"token operator\">&lt;</span>\n  <span class=\"token string\">'IResponseFailJson'</span><span class=\"token punctuation\">,</span>\n  Profile\n<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middlewareHandler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  profile<span class=\"token operator\">:</span> Profile</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IResponseSuccessJson<span class=\"token operator\">&lt;</span>CompositeResponse<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  user<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  profile</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">ResponseSuccessJson</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CompositeResponse<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    user<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    profile<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token comment\">// you don't have to type out the typings here,</span>\n<span class=\"token comment\">// TypeScript will automatically infer it from the function call</span>\n<span class=\"token keyword\">const</span> requestHandler<span class=\"token operator\">:</span> RequestHandler<span class=\"token operator\">&lt;</span>\n  <span class=\"token string\">'IResponseFailJson'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'IResponseSuccessJson'</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">withRequestMiddlewares</span><span class=\"token punctuation\">(</span>middlewareOne<span class=\"token punctuation\">,</span> middlewareTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>middlewareHandler<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Using our Request Handler with Express</h2>\n<p>Now that our middlewares have a handler, we want to tell Express to use and send\nthe resulting <code class=\"language-text\">IResponse&lt;T&gt;</code>.</p>\n<p>With the handler example above, we can see that <code class=\"language-text\">requestHandler</code> can only return\neither an <code class=\"language-text\">IResponseFailJson</code> or a <code class=\"language-text\">IResponseSucessJson</code>. However, when an\ninternal error (like <code class=\"language-text\">TypeError</code>) is thrown anywhere in the middleware chain, it\nis automatically caught by the <code class=\"language-text\">error</code> function and a response type of\n<code class=\"language-text\">ResponseErrorInternal</code> is returned to the consumer.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">RequestHandler<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  request<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">>></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> wrapRequestHandler <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  handler<span class=\"token operator\">:</span> RequestHandler<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>RequestHandler <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// our custom responses are applied to express's response</span>\n<span class=\"gatsby-highlight-code-line\">      reply <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">reply</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>      <span class=\"token comment\">// all other errors which are not handled properly are caught here,</span>\n      <span class=\"token comment\">// and returned as ResponseErrorInternal</span>\n<span class=\"gatsby-highlight-code-line\">      error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">ResponseErrorInternal</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IResponseErrorInternal<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IResponse<span class=\"token operator\">&lt;</span><span class=\"token string\">'IResponseErrorInternal'</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ResponseErrorInternal</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IResponseErrorInternal <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> response <span class=\"token operator\">=></span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">'Internal server error'</span><span class=\"token punctuation\">,</span>\n        detail<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">'IResponseErrorInternal'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using the predefined <code class=\"language-text\">requestHandler</code> with Express is as easy as wrapping the\nrequest handler with <code class=\"language-text\">wrapRequestHandler</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">wrapRequestHandler</span><span class=\"token punctuation\">(</span>requestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Recap</h2>\n<p>To recap, we have:</p>\n<ul>\n<li>A bunch of middlewares that can return <code class=\"language-text\">Either&lt;IResponse&lt;E&gt;, R&gt;</code></li>\n<li>A handler function that takes in the result <code class=\"language-text\">R</code> of each middleware and returns\none <code class=\"language-text\">IResponse&lt;T&gt;</code></li>\n<li>A <code class=\"language-text\">withRequestMiddlewares</code> function which maps the results of middlewares onto\nthe handler function, and bails if an <code class=\"language-text\">E</code> type is emitted in any middleware</li>\n<li>A <code class=\"language-text\">wrapRequestHandler</code> function which calls and applies <code class=\"language-text\">IResponse&lt;T&gt;</code> onto\n<code class=\"language-text\">express.Request</code> via the <code class=\"language-text\">apply</code> function, catches other errors and emits\nthem as an <code class=\"language-text\">ResponseErrorInternal</code></li>\n</ul>","frontmatter":{"title":"Using Express with Strictly Typed Handlers and Responses","date":"January 03, 2019","description":null}},"previous":null,"next":{"fields":{"slug":"/sleep-in-async-context/"},"frontmatter":{"title":"Sleep in Async Contexts"}}},"pageContext":{"id":"543907d7-f67c-5638-8129-47f985c2f836","previousPostId":null,"nextPostId":"9873c9c9-3a64-5e7c-ad06-68839b2a867d"}},"staticQueryHashes":["2841359383","916993862"]}